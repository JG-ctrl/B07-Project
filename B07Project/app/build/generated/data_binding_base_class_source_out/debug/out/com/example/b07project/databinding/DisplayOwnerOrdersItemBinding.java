// Generated by view binder compiler. Do not edit!
package com.example.b07project.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.b07project.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DisplayOwnerOrdersItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final View divider3;

  @NonNull
  public final View divider4;

  @NonNull
  public final Button ownerOrderButton;

  @NonNull
  public final TextView ownerOrderItemAmount;

  @NonNull
  public final TextView ownerOrderItemId;

  @NonNull
  public final TextView ownerOrderItemName;

  @NonNull
  public final TextView ownerOrderItemStatus;

  private DisplayOwnerOrdersItemBinding(@NonNull LinearLayout rootView, @NonNull View divider3,
      @NonNull View divider4, @NonNull Button ownerOrderButton,
      @NonNull TextView ownerOrderItemAmount, @NonNull TextView ownerOrderItemId,
      @NonNull TextView ownerOrderItemName, @NonNull TextView ownerOrderItemStatus) {
    this.rootView = rootView;
    this.divider3 = divider3;
    this.divider4 = divider4;
    this.ownerOrderButton = ownerOrderButton;
    this.ownerOrderItemAmount = ownerOrderItemAmount;
    this.ownerOrderItemId = ownerOrderItemId;
    this.ownerOrderItemName = ownerOrderItemName;
    this.ownerOrderItemStatus = ownerOrderItemStatus;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DisplayOwnerOrdersItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DisplayOwnerOrdersItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.display_owner_orders_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DisplayOwnerOrdersItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.divider3;
      View divider3 = ViewBindings.findChildViewById(rootView, id);
      if (divider3 == null) {
        break missingId;
      }

      id = R.id.divider4;
      View divider4 = ViewBindings.findChildViewById(rootView, id);
      if (divider4 == null) {
        break missingId;
      }

      id = R.id.owner_order_button;
      Button ownerOrderButton = ViewBindings.findChildViewById(rootView, id);
      if (ownerOrderButton == null) {
        break missingId;
      }

      id = R.id.owner_order_item_amount;
      TextView ownerOrderItemAmount = ViewBindings.findChildViewById(rootView, id);
      if (ownerOrderItemAmount == null) {
        break missingId;
      }

      id = R.id.owner_order_item_id;
      TextView ownerOrderItemId = ViewBindings.findChildViewById(rootView, id);
      if (ownerOrderItemId == null) {
        break missingId;
      }

      id = R.id.owner_order_item_name;
      TextView ownerOrderItemName = ViewBindings.findChildViewById(rootView, id);
      if (ownerOrderItemName == null) {
        break missingId;
      }

      id = R.id.owner_order_item_status;
      TextView ownerOrderItemStatus = ViewBindings.findChildViewById(rootView, id);
      if (ownerOrderItemStatus == null) {
        break missingId;
      }

      return new DisplayOwnerOrdersItemBinding((LinearLayout) rootView, divider3, divider4,
          ownerOrderButton, ownerOrderItemAmount, ownerOrderItemId, ownerOrderItemName,
          ownerOrderItemStatus);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
